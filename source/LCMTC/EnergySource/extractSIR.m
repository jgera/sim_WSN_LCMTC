%   SIR_data=extractSIR(filename, startMonth, startDay, length) 
%
%   extract Solar IRradiation data in W/m^2 from .csv files freely
%   downloadable from http://www.soda-is.com/eng/services/service_invoke/gui.php?xml_descript=hc3v5_invoke_15_demo.xml#parameters
%   and create  SIR_data, an (m x 1) vector containing m rows. Each row is
%   the mean of the Solar IRradiation over a timestep of 15 minutes.
%
%   INPUTS:
%   -filename: a string containing the full pathname of the .csv file 
%              downloaded from soda-is website.
%   -startMonth: is the number of the month of interest.
%   -startDay: is the number of the day of interest.
%   -length: is the length (in days) of the observation period. It is also
%            proportional to the length of SIR_data vector. In-fact, 
%            m = 96 x lentgh.  
%   OUTPUTS:
%   -SIR_data: is the vector containing the mean of the Solar Irradiation 
%              values over a timestep of 15 minutes. First row is the mean 
%              of the solar irradiation value in period 0h00m-0h15m of the
%              first day selected (startMonth/startDay/2005), the second 
%              row is the mean of the solar irradiation value in period 
%              0h15m-0h30m, etc up to the last day.
%   EXAMPLE:
%   SIR_data=extractSIR('request_hc3v5lat43.630_lon13.500_2005-01-01_2005-12-31_990776387.csv', 03, 18, 10);
%   SIR_data is a vector (960,1) containing the mean values of irradiation
%   data, over a timestep of 15 min, starting from 18/03/2005 at 0h00m and
%   finishing in 27/03/2005 at 23h59m (10 days). Each days is 96 rows of
%   data.
%
%import all Solar IRradiation Data from file "FREE HC15 (2004-2005) - HelioClim3v5 Time-Series of 15 min Solar Irradiance over the Horizontal Plane"
%downloadable for free from: http://www.soda-is.com/eng/services/service_invoke/gui.php?xml_descript=hc3v5_invoke_15_demo.xml#parameters
%please, set te start date to 01/January and end date to 31/December, 
%time step to 15 min, time reference to UT (Universal Time) and
%file format to .csv.
function SIR_data=extractSIR(filename, startMonth, startDay, length)
    SIR_global_data = importSIRfile(filename,22,35061);    %import 1 year of data
    for i=1:35040                                   %loop over whole file rows;
        if(SIR_global_data(i,1)==startMonth)        
            startMonthRow=i;                        %the startMonth row was found!
            break;
        end
    end 
    for i=0:2975                                    %loop over 31 days (the data for each day is contained into 96 rows)
        if(SIR_global_data((startMonthRow+i),2)==startDay)
            startRelativeDayRow=i;                  %the relative startDay row was found!
            break;
        end
    end
    startDataRow = startMonthRow + startRelativeDayRow;
    endDataRow = startDataRow + (96*length) - 1;
    SIR_data=SIR_global_data(startDataRow:endDataRow,4);      %each row contain the mean of the Solar Irradiation Data over 15 minutes. One day of data is 96 rows length
                                                  
    


function SIR_global_data = importSIRfile(filename, startRow, endRow)
% Auto-generated function to import solar radiation data from csv file
% downloaded from:
% http://www.soda-is.com/eng/services/service_invoke/gui.php?xml_descript=hc3v5_invoke_15_demo.xml#parameters
% please select timestep = 15 min and observation data = 1 year

%importSIRfile Import numeric data from a text file as a matrix.
%   SIR_global_data = importSIRfile(FILENAME) Reads data from text file
%   FILENAME for the default selection.
%
%   SIR_global_data = importSIRfile(FILENAME, STARTROW, ENDROW) Reads data
%   from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   SIR_global_data =
%   importSIRfile('request_hc3v5lat43.630_lon13.500_2005-01-01_2005-12-31_990776387.csv',
%   22, 35061);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2015/05/02 12:41:23

%% Initialize variables.
delimiter = ';';
if nargin<=2
    startRow = 22;
    endRow = inf;
end

%% Format string for each line of text:
%   column2: double (%f)
%	column3: double (%f)
%   column4: double (%f)
%	column5: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%f%f%f%f%*s%*s%*s%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
textscan(fileID, '%[^\n\r]', startRow(1)-1, 'ReturnOnError', false);
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    textscan(fileID, '%[^\n\r]', startRow(block)-1, 'ReturnOnError', false);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
SIR_global_data = [dataArray{1:end-1}];
